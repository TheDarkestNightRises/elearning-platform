@page "/ChangeEmail"
@using Elearn.HttpClients.Service
@using Elearn.Shared.Models
@using Microsoft.AspNetCore.Components
@using System.Security.Claims
@using Elearn.Shared.Dtos
@using System.ComponentModel.DataAnnotations
@inject IUserService _UserService
@inject NavigationManager NavMgr 
@inject IStringLocalizer<App> Localizer


<AuthorizeView>
    <NotAuthorized>
        <h3> @Localizer["please-log-in-to-change-your-email-text "]</h3>
    </NotAuthorized>
    <Authorized Context="Auth">

        <MudForm Model="@Dto" @ref="form" @bind-IsValid="@success" Class="pb-8">

            <MudGrid Class="d-flex justify-center align-center" Elevation="0">
                <MudItem xs="12" sm="7">
                    <MudPaper Class="pa-4">
                        <h3>
                            <MudInputLabel Class="d-flex align-center justify-center "> @Localizer["change-email-text"]</MudInputLabel>
                        </h3>
                        <MudTextField T="string" Label="Password" @bind-Value="@userPassword" InputType="InputType.Password"
                                      For="@(() => userPassword)" Validation="@(new Func<string, IEnumerable<string>>(WrongPassword))" Required="true" RequiredError="Old password field is required!">
                        </MudTextField>

                        <MudTextField T="string" Label="New email" Required="true" @bind-Value="@Dto.Email" InputType="InputType.Email"
                                      For="@(() => Dto.Email)" RequiredError="New Email field is required!" Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})">
                        </MudTextField>


                        <MudCardActions Class="d-flex justify-center pt-4">
                            <MudButton Class="mx-2" OnClick="ChangeUserEmail" Variant="Variant.Filled" Disabled="@(!success)" Color="Color.Success">@Localizer["change-email-text"]</MudButton>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@(() => form.Validate())">@Localizer["validate-text"]</MudButton>
                            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@(() => form.Reset())" Class="mx-2">@Localizer["reset-text"]</MudButton>
                        </MudCardActions>
                    </MudPaper>
                </MudItem>

            </MudGrid>


        </MudForm>

    </Authorized>

</AuthorizeView>

@code {

    public bool success;
    public MudForm form;
    public UpdateUserDto Dto = new();
    public string userPassword;
    private string? username;
    public UserDto? CurrentUser;

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private IEnumerable<Claim>? userClaims;
    private bool isLoggedIn;


    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        isLoggedIn = user.Identity != null;

        if (!isLoggedIn) return;

        userClaims = user.Claims;
        username = user.Identity!.Name!;

        CurrentUser = await _UserService.GetUserByUsernameAsync(username);
        Dto.Password = CurrentUser.Password;
        Dto.Name = CurrentUser.Name;
        Dto.Image = CurrentUser.Image;
        Dto.Approved = CurrentUser.Approved;
    }

    private async Task ChangeUserEmail()
    {
        if (userPassword.Equals(CurrentUser?.Password))
        {
            await _UserService.UpdateUserAsync(Dto);
            NavMgr.NavigateTo($"/ManageAccount",true);
        }
    }


    private IEnumerable<string> WrongPassword(string pw)
    {
        if (!CurrentUser.Password.Equals(pw))
        {
            yield return "password is wrong!";
        }
    }

}