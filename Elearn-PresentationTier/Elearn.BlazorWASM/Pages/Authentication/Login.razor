@page "/Login"
@using Elearn.HttpClients.Service
@using Elearn.Shared.Models
@using System.Security.Claims
@using Elearn.Shared.Dtos
@inject IAuthService authService
@inject NavigationManager navMgr
@inject IStringLocalizer<App> Localizer


<style>
    body {
    background-image: url("img/pawel-nolbert-4u2U8EO9OzY-unsplash.jpg");
    }
</style>

<AuthorizeView Context="authContext">
    <NotAuthorized>
        <div class="page-background-class">
            <MudCard Class="mx-auto pa-6 mt-12" Style="width: 500px;">
                <MudText Align="Align.Center" Typo="Typo.h3" Class="mt-1 my-9"> @Localizer["login-text"] </MudText>
                <EditForm Model="@_userLoginDto" OnValidSubmit="LoginAsync" Context="formContext">
                    <DataAnnotationsValidator/>
                    <div class="form-group">
                        <MudTextField Validation="@(new Func<string, string>(UsernameError))" @bind-Value="_userLoginDto.Username" Label="Username" Variant="Variant.Text" Class="mt-5"></MudTextField>
                        <ValidationMessage For="@(() => _userLoginDto.Username)"/>
                    </div>
                    <div class="form-group">
                        <MudTextField Validation="@(new Func<string, string>(PasswordError))" @bind-Value="_userLoginDto.Password" Label="Password" Variant="Variant.Text" Class="mt-5" InputType="InputType.Password"></MudTextField>
                        <ValidationMessage For="@(() => _userLoginDto.Password)"/>
                    </div>
                    <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary" ButtonType="ButtonType.Submit" Class="mt-10"> @Localizer["login-text"]</MudButton>
                    <ValidationSummary/>
                </EditForm>
            </MudCard>
        </div>
    </NotAuthorized>
    <Authorized>
        <MudCard>
            <MudText>@Localizer["hello-text"] @authContext.User.Identity.Name</MudText>
        </MudCard>
    </Authorized>
</AuthorizeView>


@code {
    private string errorLabel;
    private UserLoginDto _userLoginDto = new();

    private async Task LoginAsync()
    {
        errorLabel = "";

        try
        {
            await authService.LoginAsync(_userLoginDto.Username, _userLoginDto.Password);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorLabel = $"Error: {e.Message}";
        }
    }
    private string UsernameError(string arg)
    {
        if (_userLoginDto.Username is null)
        {
            return "You should input your  Username";
        }
        return null;
    }
    private string PasswordError(string arg)
    {
        if (_userLoginDto.Password is null)
        {
            return "You should input your Password";
        }
        return null;
    }
}