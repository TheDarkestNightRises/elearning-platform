@page "/create-lecture"
@inject ILectureService LectureService
@inject IAuthService authService
@inject NavigationManager NavMgr 
@using Blazored.TextEditor
@using Elearn.HttpClients.Service
@using Elearn.Shared.Dtos
@using Elearn.Shared.Models
@using Microsoft.AspNetCore.Components
@using System.Security.Claims
@inject IStringLocalizer<App> Localizer

<AuthorizeView>
    <NotAuthorized>
        <h3> @Localizer["please-log-in-to-create-a-post-text"]</h3>
    </NotAuthorized>
    <Authorized Context="Auth">
        <h3>  @Localizer["create-a-new-educational-post-text"]</h3>
        <EditForm Model="@_newLecture" OnValidSubmit="CreateNewPost">
            <DataAnnotationsValidator/>
            <div class="form-group">
                <label for="title">@Localizer["title-text"]</label>
                <InputText id="title" @bind-Value="_newLecture.Title" class="form-control"/>
                <ValidationMessage For="@(() => _newLecture.Title)"/>
            </div>
            <div class="form-group">
                <label for="url">Url</label>
                <InputText id="url" @bind-Value="_newLecture.Url" class="form-control"/>
                <ValidationMessage For="@(() => _newLecture.Url)"/>
            </div>
            <div class="form-control-file">
                <label for="image">@Localizer["image-text"]</label>
                <InputFile OnChange="OnFileChange"></InputFile>
            </div>
            <div class="form-group">
                <label for="date">@Localizer["date-text"]</label>
                <InputDate id="date" @bind-Value="_newLecture.Date" class="form-control"/>
            </div>
            <button type="submit" class="btn btn-primary">@Localizer["create-text"]</button>
            <div class="col-md-8">
        
                <div class="card">
                    <div class="card-header">
                       @Localizer["html-text-editor-text"]
                    </div>
                    <div class="card-body mb-5" style="height:200px; color:black;">
                        <!-- Text editor -->
                        <BlazoredTextEditor @ref=QuillHtml Placeholder="write somthing...">
        
                            <ToolbarContent>
                                <select class="ql-header">
                                    <option selected=""></option>
                                    <option value="1"></option>
                                    <option value="2"></option>
                                    <option value="3"></option>
                                    <option value="4"></option>
                                    <option value="5"></option>
                                </select>
                                <span class="ql-formats">
                                    <button class="ql-bold"></button>
                                    <button class="ql-italic"></button>
                                    <button class="ql-underline"></button>
                                    <button class="ql-strike"></button>
                                </span>
                                <span class="ql-formats">
                                    <select class="ql-color"></select>
                                    <select class="ql-background"></select>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-list" value="ordered"></button>
                                    <button class="ql-list" value="bullet"></button>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-link"></button>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-video"></button>
                                </span>
        
                            </ToolbarContent>
        
                        </BlazoredTextEditor>
        
                    </div>
                </div>
            </div>
            <ValidationSummary/>
        </EditForm>
        <!-- Preview card -->
        <div class="card">
            <div class="card-header">
                 @Localizer["the-preview-of-html-editor-text"]  
            </div>
            <div class="card-body">
                @preview
            </div>
        </div>
        <div class="card-footer">
            <button type="button" class="btn btn-success" @onclick=@(async () => await ShowPreviewOfBody())>@Localizer["show-output-text"]</button>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    private BlazoredTextEditor QuillHtml;
    private MarkupString preview;
    private LectureCreationDto _newLecture = new();
    
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    private string? name;
    private IEnumerable<Claim>? userClaims;
    private bool isLoggedIn;

    async Task CreateNewPost()
    {
        _newLecture.Body = await QuillHtml.GetHTML();
        _newLecture.Username = name;
        var createdPost = await LectureService.CreateAsync(_newLecture);
        NavMgr.NavigateTo($"/Lectures/{_newLecture.Url}");
    }

    private async Task ShowPreviewOfBody()
    {
        if (!string.IsNullOrWhiteSpace(await QuillHtml.GetText()))
        {
            preview = (MarkupString)await QuillHtml.GetHTML();
        }
    }

    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        var resizedImage = await e.File.RequestImageFileAsync(format, 500, 500);
        var buffer = new byte[resizedImage.Size];
        await resizedImage.OpenReadStream().ReadAsync(buffer);
        var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
        _newLecture.Image = imageData;
    }

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        isLoggedIn = user.Identity != null;
        
        if (!isLoggedIn) return;
        
        userClaims = user.Claims;
        name = user.Identity!.Name!;
    }

}