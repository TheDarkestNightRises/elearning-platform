@page "/Register"
@using Microsoft.AspNetCore.Components
@using Elearn.Shared.Dtos
@using Elearn.Shared.Enum
@using Elearn.HttpClients.Service
@using System.Text.RegularExpressions
@inject IAuthService authService


<EditForm Model="@newUser" OnValidSubmit="CreateNewUserAsync">
    <DataAnnotationsValidator/>
    <MudGrid Class="d-flex justify-center align-center" Elevation="0">
        <MudItem xs="12" sm="7">
            <MudPaper Class="pa-4">
                <MudForm>
                    <h3>
                        <MudInputLabel Class="d-flex align-center justify-center ">Registration</MudInputLabel>
                    </h3>
                    <MudTextField T="string" Label="Username" Required="true" @bind-Value="newUser.Username" InputType="InputType.Text"
                                  For="@(() => newUser.Username)" RequiredError="User name field is required!">
                    </MudTextField>
                    <MudTextField T="string" Label="Password" Required="true" @bind-Value="newUser.Password" InputType="InputType.Password"
                                  For="@(() => newUser.Password)" RequiredError="Password filed is required!">
                    </MudTextField>
                    <MudTextField T="string" Label="Repeat Password" Required="true" @bind-Value="@repeatPassword" InputType="InputType.Password"
                                  For="@(() => @repeatPassword)" RequiredError="Repeat password field is required!">
                    </MudTextField>
                    <MudTextField T="string" Label="Email" Required="true" @bind-Value="newUser.Email" InputType="InputType.Email"
                                  For="@(() => newUser.Email)" RequiredError="Email is required!">
                    </MudTextField>
                    <MudTextField T="string" Label="Name" Required="true" @bind-Value="newUser.Name" InputType="InputType.Text"
                                  For="@(() => newUser.Username)" RequiredError="Name of user is required!">
                    </MudTextField>

                    @* <MudSelect T="string" Label="Role" Required="true" RequiredError="Account type is required!" Margin="Margin.Dense" Variant="Variant.Filled"> *@
                    @*     <MudSelectItem @bind-Value="newUser.Role"/> *@
                    @* </MudSelect> *@
                    <MudSelect T="string" Class="d-flex align-center" @bind-Value="newUser.Role" Label="Choose Role" Required="true">

                        @foreach (var role in Enum.GetValues(typeof(RoleEnum)))
                        {
                            <MudSelectItem Value="newUser.Role">@RoleEnum.Student</MudSelectItem>
                            <MudSelectItem Value="newUser.Role">@RoleEnum.Teacher</MudSelectItem>
                        }

                    </MudSelect>

                    <MudCardActions Class="d-flex justify-center">
                        <MudButton Class="mx-2" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success" >Create Account</MudButton>
                    </MudCardActions>
                </MudForm>
            </MudPaper>
        </MudItem>
        
    </MudGrid>

    @* <div class="form-group "> *@
    @*     <InputSelect @bind-Value="newUser.Role"> *@
    @*         <option>Choose role</option> *@
    @*         @foreach (var role in Enum.GetValues(typeof(RoleEnum))) *@
    @*         { *@
    @*             <option value="@role">@role</option> *@
    @*         } *@
    @*     </InputSelect> *@
    @* </div> *@

    <ValidationSummary/>
    </EditForm> 


@code {
    public UserCreationDto newUser = new();
    public string repeatPassword;
    
    
    private async Task  CreateNewUserAsync()
    {
        if (newUser.Role.Equals(RoleEnum.Student.ToString()))
            newUser.SecurityLevel = 2;
        if (newUser.Role.Equals(RoleEnum.Teacher.ToString()))
            newUser.SecurityLevel = 4;
     if(repeatPassword.Equals(newUser.Password))
         await authService.RegisterAsync(newUser);

    }
@code {
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

}
}