@page "/Profile"
@using Elearn.Shared.Models
@using Microsoft.AspNetCore.Components
@using Elearn.Shared.Dtos
@using Elearn.HttpClients.Service
@using System.Security.Claims
@using System.Net.Mime
@inject ILectureService _lectureService
@inject IQuestionService _questionService
@inject IUserService _userService
@inject NavigationManager NavMgr 
@inject IStringLocalizer<App> Localizer


<AuthorizeView>
    <NotAuthorized>
        <div class="d-flex align-center justify-center">
            <h3>@Localizer["login-in-view-profil-text"]</h3>
        </div>
        <div>
            <MudCardActions Class="d-flex justify-center">
                <MudButton Class="mx-2" OnClick="() => OpenLoginView()" Variant="Variant.Filled" Color="Color.Success">
                    <img src="img/Login.png"/>
                </MudButton>
            </MudCardActions>
        </div>

    </NotAuthorized>
    <Authorized Context="Auth">


        <div class="page-background-class align-center justify-center">
            <MudCard Class="mx-auto pa-6 mt-12" Style="width: 500px;">
                <h3 class=" d-flex justify-center">@Localizer["hello-text"] @CurrentUser?.Name</h3>
                <div class="form-group d-flex justify-center">
                    <label>@Localizer["user-id-text"] @CurrentUser?.Id</label>
                </div>
                <div class="form-group d-flex justify-center">
                    <label>@Localizer["username-text"] @CurrentUser?.Username</label>
                </div>
                <div class="form-group d-flex justify-center">
                    <label>@Localizer["current-email-text"] @CurrentUser?.Email</label>
                </div>
                <div class="form-group d-flex justify-center">
                    <label> @Localizer["role-text"] @CurrentUser?.Role</label>
                </div>

                <MudCard>
                    <MudCardContent>
                        <MudImage Class="card-img" Src="@Dto.Image" ObjectFit="ObjectFit.Contain" Height="200"></MudImage>
                    </MudCardContent>
                    <MudCardActions class="form-control-file">
                        <label for="image">@Localizer["image-text"]</label>
                        <InputFile OnChange="OnFileChange"></InputFile>
                    </MudCardActions>
                    <MudCardActions>
                        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(UpdateImage)">@Localizer["save-text"]</MudButton>
                    </MudCardActions>
                </MudCard>


            </MudCard>
        </div>
        <br/>

        <hr/>
        <br/>
        <br/>
        <div class="page-background-class align-center justify-center">
            <div class="allLectures">
                <h2>@Localizer["all-lectures-text"]</h2>
                @if (_lectureToShow == null)
                {
                    <LoadingComponent message=" Lectures. Please wait.."></LoadingComponent>
                }
                else
                {
                    <LectureList lectureToShow="_lecturesToShow"/>
                }

                <hr/>
                <br/>
                <br/>

            </div>
            <div class="allLectures">
                <h2>@Localizer["upvoted-lectures-text"]</h2>
                @if (_upvotedLectureToShow == null)
                {
                    <LoadingComponent message=" Upvoted lectures. Please wait.."></LoadingComponent>
                }
                else
                {
                    <LectureList upvotedLectureToShow="_upvotedLectureToShow"/>
                }
                <hr/>
                <br/>
                <br/>
            </div>
            <div class="allQuestions">
                <h2>@Localizer["all-questions-text"]</h2>
                @if (_questionToShow == null)
                {
                    <LoadingComponent message=" Questions. Please wait.."></LoadingComponent>
                }
                else
                {
                    <QuestionList questionToShow="_questionToShow"/>
                }
            </div>
        </div>
    </Authorized>

</AuthorizeView>

@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private IEnumerable<Claim>? userClaims;
    private string? username;
    private bool isLoggedIn;
    private List<LectureDto?> _lectureToShow;
    private LectureDto _lectureToDto;
    private List<LectureDto?> _upvotedLectureToShow;
    private List<QuestionDto?> _questionToShow;
    private bool _hidePosition;
    private bool _loading;
    public UserDto? CurrentUser;
    public UpdateUserDto Dto = new();

    private void OpenLoginView()
    {
        NavMgr.NavigateTo($"/LoginUI");
    }

    protected override async Task OnInitializedAsync()
    {
        if (await InitUpdateUser()) return;
        await InitHistory();
    }

    private async Task<bool> InitUpdateUser()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        isLoggedIn = user.Identity != null;
        if (!isLoggedIn) return true;
        userClaims = user.Claims;
        username = user.Identity!.Name;
        CurrentUser = await _userService.GetUserByUsernameAsync(username);
        CreateDto(CurrentUser);
        return false;
    }

    private void CreateDto(UserDto userDto)
    {
        Dto = new UpdateUserDto
        {
            Name = userDto.Name,
            Password = userDto.Password,
            Email = userDto.Email,
            Image = userDto.Image,
            Approved = userDto.Approved
        };
    }

    private async Task InitHistory()
    {
        try
        {
            await GetLectureByTeacherId();
            await GetUpvotedLecureByUserId();
            await GetQuestionByUserId();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }


    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        var resizedImage = await e.File.RequestImageFileAsync(format, 500, 500);
        var buffer = new byte[resizedImage.Size];
        await resizedImage.OpenReadStream().ReadAsync(buffer);
        var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
        Console.WriteLine($"{imageData} is here");
        Dto.Image = imageData;
    }

    private async Task UpdateImage()
    {
        Console.WriteLine(Dto);
        await _userService.UpdateUserAsync(Dto);
        NavMgr.NavigateTo($"/ManageAccount", true);
    }


    private async Task GetLectureByTeacherId()
    {
        _lectureToShow = await _lectureService.GetLectureByTeacherIdAsync(CurrentUser.Id);
    }

    private async Task GetUpvotedLecureByUserId()
    {
        _upvotedLectureToShow = await _lectureService.GetUpvotedLectureByUserIdAsync(CurrentUser.Id);
    }

    private async Task GetQuestionByUserId()
    {
        _questionToShow = await _questionService.GetQuestionByUserIdAsync(CurrentUser.Id);
    }

}